# 请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

# 示例 1：
# 输入：0000 0000 0000 0000 0000 0000 0000 1011
# 输出：3
# 解释：输入的二进制串 0000 0000 0000 0000 0000 0000 0000 1011 中，共有三位为 '1'。

# 示例 2：
# 输入：0000 0000 0000 0000 0000 0000 1000 0000
# 输出：1
# 解释：输入的二进制串 0000 0000 0000 0000 0000 0000 1000 0000 中，共有一位为 '1'。

# 示例 3：
# 输入：1111 1111 1111 1111 1111 1111 1111 1101
# 输出：31
# 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

class Solution:
    def hammingWeight(self, n: int) -> int:
        count = 0
        # n 循环右移和 1 按位与
        while n != 0:
            count += n & 1
            n = n >> 1

        return count
    
    def hammingWeight_(self, n: int) -> int:
        count = 0
        # 统计 n 和  n-1 按位与得到 0 的次数
        #* n - 1 :      最右边的 1 变为 0 ， 此 1 右边的 0 都变为 1
        #* n & (n-1):   n 最右侧的 1 变为 0

        #* e.g.:
        #* n   = 1010 1000
        #* n-1 = 1010 0111
        #* n&(n-1) = 1010 0000

        while n != 0:
            n = n & (n - 1)
            count += 1
        return count
